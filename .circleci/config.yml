version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@8.0.0

jobs:
  lint-test:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: Run lint
          command: |
            hadolint Dockerfile

  kube-deploy:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: Apply parameters to kubernetes deployment script
          command: |
            sed "s/<IMAGE_TAG>/$CIRCLE_WORKFLOW_ID/1" .circleci/eks/eks-cluster-config.yml | \
              sed "s/<AWS_ECR_REGISTRY_ID>/$AWS_ECR_REGISTRY_ID/1" > .circleci/eks/deployment.yaml
            cat .circleci/eks/deployment.yaml
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y curl unzip
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: my-eks-cluster
          aws-region: $AWS_REGION
      - run:
          name: Kubectl Apply
          command: |
            cat .circleci/eks/deployment.yaml
            echo "config is: "
            cat /root/.kube/config
            kubectl apply --role-arn arn:aws:iam::266318413124:role/myEKSClusterRole --kubeconfig=/root/.kube/config -f .circleci/eks/deployment.yaml
#      - kubernetes/create-or-update-resource:
#          get-rollout-status: true
#          resource-file-path: .circleci/eks/deployment.yaml
#          resource-name: deployment/nginx-hello-world
#          show-kubectl-command: true

workflows:
  default:
    jobs:
      - lint-test
      - aws-ecr/build-and-push-image:
          create-repo: true
          repo: nginx-hello-world
          tag: 'latest,$CIRCLE_WORKFLOW_ID'
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY

          requires: [lint-test]

      - kube-deploy:
          requires: [aws-ecr/build-and-push-image]